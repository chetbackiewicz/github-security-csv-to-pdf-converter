name: Deploy to EKS

on:
  push:
    branches:
      - 'main'
      - 'releases/**'
  workflow_dispatch:

env:
  ECR_REPOSITORY: github_security_report
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::852248767159:role/eksctl-clustertest-cluster-ServiceRole-NRUmY9qUsM5J
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > image.txt

      - name: 📤 Upload image reference as artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-artifact
          path: image.txt

  deploy:
    name: Deploy to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::852248767159:role/eksctl-clustertest-cluster-ServiceRole-NRUmY9qUsM5J
          aws-region: ${{ env.AWS_REGION }}

      - name: 🛠️ Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.3/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: 🔧 Configure kubectl with EKS context
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: 🔍 Validate kubectl access
        run: |
          echo "Checking EKS access..."
          kubectl get nodes

      - name: 📥 Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: image-artifact

      - name: 🧪 Load image into environment
        run: |
          IMAGE=$(cat image.txt)
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: 🚀 Deploy to EKS
        run: |
          cp ./deploy.yaml ./deploy.tmp.yaml
          sed -i "s|image: REPOSITORY_TAG|image: $IMAGE|g" ./deploy.tmp.yaml
          kubectl apply -f ./deploy.tmp.yaml
          rm ./deploy.tmp.yaml
